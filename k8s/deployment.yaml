apiVersion: v1
kind: Namespace
metadata:
  name: sre-agent
  labels:
    name: sre-agent
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sre-agent-config
  namespace: sre-agent
data:
  ENVIRONMENT: "production"
  PORT: "8000"
---
apiVersion: v1
kind: Secret
metadata:
  name: sre-agent-secrets
  namespace: sre-agent
type: Opaque
data:
  # Base64 encoded GEMINI_API_KEY
  # Replace with actual base64 encoded API key: echo -n "your-api-key" | base64
  GEMINI_API_KEY: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sre-agent
  namespace: sre-agent
  labels:
    app: sre-agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sre-agent
  template:
    metadata:
      labels:
        app: sre-agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sre-agent
      containers:
      - name: sre-agent
        image: gcr.io/PROJECT_ID/sre-agent:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: sre-agent-config
        - secretRef:
            name: sre-agent-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sre-agent
  namespace: sre-agent
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sre-agent
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "namespaces", "nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sre-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sre-agent
subjects:
- kind: ServiceAccount
  name: sre-agent
  namespace: sre-agent
---
apiVersion: v1
kind: Service
metadata:
  name: sre-agent-service
  namespace: sre-agent
  labels:
    app: sre-agent
spec:
  selector:
    app: sre-agent
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sre-agent-ingress
  namespace: sre-agent
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "sre-agent-ip"
    networking.gke.io/managed-certificates: "sre-agent-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
  - host: sre-agent.yourdomain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sre-agent-service
            port:
              number: 80
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: sre-agent-ssl-cert
  namespace: sre-agent
spec:
  domains:
    - sre-agent.yourdomain.com  # Replace with your domain